generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  company        String?
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  articles       Article[]
  comments       Comment[]
  likes          Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id              Int       @id @default(autoincrement())
  date            DateTime  @default(now())
  title           String    @unique
  summary         String    @db.Text
  text            String    @db.MediumText
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId      Int
  category        Category  @relation(fields: [categoryId], references: [id])
  image           String
  tags            String
  commentsEnabled Boolean
  comments        Comment[]
  likes           Like[]
}

model Category {
  id       Int       @id @default(autoincrement())
  parentId Int?
  name     String    @unique
  articles Article[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  text      String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id])
}

model Like {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId Int
  article   Article @relation(fields: [articleId], references: [id])
}
